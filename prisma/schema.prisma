// This is the original schema for the CRM
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Sales Rep / User
model User {
  id                    String    @id @default(uuid())
  name                  String
  email                 String    @unique
  role                  Role
  active                Boolean   @default(true)
  onboardedAt           DateTime? @map("onboarded_at")
  firstLoginAt          DateTime? @map("first_login_at")
  tempPassword          String?   @map("temp_password")
  passwordResetRequired Boolean   @default(false) @map("password_reset_required")
  baaCompleted          Boolean   @default(false) @map("baa_completed")
  baaCompletedAt        DateTime? @map("baa_completed_at")
  w9Completed           Boolean   @default(false) @map("w9_completed")
  w9CompletedAt         DateTime? @map("w9_completed_at")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts        Account[]
  submissions     Submission[]
  documents       Document[]
  createdInvites  InviteToken[] @relation("CreatedInvites")
  mailMessages    MailMessage[]

  @@map("users")
}

// Practice/Account
model Account {
  id             String   @id @default(uuid())
  practiceName   String   @map("practice_name")
  npiOrg         String?  @map("npi_org")
  einTin         String?  @map("ein_tin")
  phoneDisplay   String?  @map("phone_display")
  phoneE164      String?  @map("phone_e164")
  fax            String?
  email          String?
  ehrSystem      String?  @map("ehr_system")
  addressLine1   String?  @map("address_line1")
  addressLine2   String?  @map("address_line2")
  city           String?
  state          String?
  zip            String?
  curaGenesisUserId String? @map("curagenesis_user_id")
  totalOrders    Int      @default(0) @map("total_orders")
  lastSyncedAt   DateTime? @map("last_synced_at")
  status         AccountStatus @default(PENDING)
  leadSource     String?  @map("lead_source")
  ownerRepId     String?  @map("owner_rep_id")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ownerRep     User?         @relation(fields: [ownerRepId], references: [id])
  contacts     Contact[]
  submissions  Submission[]
  mailMessages MailMessage[]

  @@map("accounts")
}

// Contact at Practice
model Contact {
  id                    String       @id @default(uuid())
  accountId             String       @map("account_id")
  contactType           ContactType  @map("contact_type")
  fullName              String       @map("full_name")
  title                 String?
  npiIndividual         String?      @map("npi_individual")
  phoneDisplay          String?      @map("phone_display")
  phoneE164             String?      @map("phone_e164")
  email                 String?
  preferredContactMethod String?     @map("preferred_contact_method")
  isPrimary             Boolean      @default(false) @map("is_primary")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  account Account @relation(fields: [accountId], references: [id])

  @@map("contacts")
}

// BAA/W9 Documents
model Document {
  id       String        @id @default(uuid())
  userId   String        @map("user_id")
  type     DocumentType
  fileName String        @map("file_name")
  fileUrl  String        @map("file_url")
  fileSize Int           @map("file_size")
  mimeType String        @map("mime_type")
  status   DocumentStatus @default(PENDING)
  signedAt DateTime?     @map("signed_at")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("documents")
}

// API Call History
model Submission {
  id              String           @id @default(uuid())
  accountId       String           @map("account_id")
  submittedById   String           @map("submitted_by_id")
  status          SubmissionStatus
  idempotencyKey  String?          @unique @map("idempotency_key")
  requestPayload  Json             @map("request_payload")
  responsePayload Json?            @map("response_payload")
  errorMessage    String?          @map("error_message")
  httpCode        Int?             @map("http_code")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  account     Account @relation(fields: [accountId], references: [id])
  submittedBy User    @relation(fields: [submittedById], references: [id])

  @@map("submissions")
}

// Invite Tokens for Onboarding
model InviteToken {
  id           String    @id @default(uuid())
  token        String    @unique @default(cuid())
  email        String
  role         Role
  tempPassword String?   @map("temp_password")
  used         Boolean   @default(false)
  usedAt       DateTime? @map("used_at")
  expiresAt    DateTime  @map("expires_at")
  createdById  String    @map("created_by_id")
  createdAt    DateTime  @default(now())

  createdBy User @relation("CreatedInvites", fields: [createdById], references: [id])

  @@map("invite_tokens")
}

// System Settings
model Setting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Email Messages (WorkMail mirror + SES sent)
model MailMessage {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  accountId       String?       @map("account_id") // Link to practice/customer
  folder          MailFolder    @default(INBOX)
  messageId       String?       @unique @map("message_id") // Email Message-ID header
  inReplyTo       String?       @map("in_reply_to") // For threading
  references      String?       // Email References header (for threading)
  from            String        // Sender email
  to              String        // Recipient(s) - JSON array or comma-separated
  cc              String?       // CC recipients
  bcc             String?       // BCC recipients
  subject         String        @default("")
  snippet         String?       // First 150 chars of body
  bodyText        String?       @map("body_text") @db.Text // Plain text body
  bodyHtml        String?       @map("body_html") @db.Text // HTML body
  s3Key           String?       @map("s3_key") // S3 path to raw .eml file
  hasAttachments  Boolean       @default(false) @map("has_attachments")
  attachmentCount Int           @default(0) @map("attachment_count")
  isRead          Boolean       @default(false) @map("is_read")
  isStarred       Boolean       @default(false) @map("is_starred")
  receivedAt      DateTime      @default(now()) @map("received_at")
  sentAt          DateTime?     @map("sent_at") // For sent emails
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])

  @@index([userId, folder, receivedAt])
  @@index([messageId])
  @@index([accountId])
  @@map("mail_messages")
}

// Enums
enum Role {
  ADMIN
  AGENT
}

enum MailFolder {
  INBOX
  SENT
  DRAFT
  ARCHIVE
  TRASH
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUBMITTED
}

enum ContactType {
  admin
  clinical
  billing
  provider
}

enum DocumentType {
  BAA
  W9
  OTHER
}

enum DocumentStatus {
  PENDING
  SIGNED
  EXPIRED
  REJECTED
}

enum SubmissionStatus {
  PENDING
  SUCCESS
  FAILED
}
