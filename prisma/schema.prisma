// This is the original schema for the CRM
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Sales Rep / User
model User {
  id                    String    @id @default(uuid())
  name                  String
  email                 String    @unique
  password              String?   // Hashed password
  role                  Role
  // team                  Team?     // In-house, Vantage Point, etc. // COMMENTED OUT - DB column doesn't exist yet
  active                Boolean   @default(true)
  onboardedAt           DateTime? @map("onboarded_at")
  firstLoginAt          DateTime? @map("first_login_at")
  tempPassword          String?   @map("temp_password")
  passwordResetRequired Boolean   @default(false) @map("password_reset_required")
  baaCompleted          Boolean   @default(false) @map("baa_completed")
  baaCompletedAt        DateTime? @map("baa_completed_at")
  w9Completed           Boolean   @default(false) @map("w9_completed")
  w9CompletedAt         DateTime? @map("w9_completed_at")
  
  // onboarding
  corpEmail         String?       @unique @map("corp_email")
  crmTempPassword   String?       @map("crm_temp_password")
  emailTempPassword String?       @map("email_temp_password")
  onboardStatus     OnboardStatus? @map("onboard_status")
  suspensionReason  String?       @map("suspension_reason")
  
  recruiterInvitedById String?    @map("recruiter_invited_by_id")
  recruiterInvitedBy   User?      @relation("RecruiterInvite", fields: [recruiterInvitedById], references: [id])
  recruiterInvites     User[]     @relation("RecruiterInvite")
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts            Account[]
  submissions         Submission[]
  documents           Document[]
  createdInvites      InviteToken[] @relation("CreatedInvites")
  repProfile          RepProfile?
  userDocuments       UserDocument[]
  activities          Activity[]
  activityLogs        ActivityLog[] @relation("UserActivities")
  uploadedDocuments   LibraryDocument[] @relation("UploadedDocuments")
  receivedDocuments   DocumentRecipient[] @relation("ReceivedDocuments")
  
  // Document Management System
  createdFolders      Folder[] @relation("CreatedFolders")
  uploadedFiles       DocumentFile[] @relation("UploadedFiles")
  
  // Email Integration
  mailMessages        MailMessage[]

  @@map("users")
}

// Practice/Account
model Account {
  id             String   @id @default(uuid())
  practiceName   String   @map("practice_name")
  specialty      String?
  npiOrg         String?  @map("npi_org")
  einTin         String?  @map("ein_tin")
  phoneDisplay   String?  @map("phone_display")
  phoneE164      String?  @map("phone_e164")
  fax            String?
  email          String?
  website        String?
  ehrSystem      String?  @map("ehr_system")
  addressLine1   String?  @map("address_line1")
  addressLine2   String?  @map("address_line2")
  city           String?
  state          String?
  zip            String?
  curaGenesisUserId String? @map("curagenesis_user_id")
  totalOrders    Int      @default(0) @map("total_orders")
  lastSyncedAt   DateTime? @map("last_synced_at")
  status         AccountStatus @default(PENDING)
  leadSource     String?  @map("lead_source")
  ownerRepId     String?  @map("owner_rep_id")
  // primaryContactName     String?  @map("primary_contact_name") // COMMENTED OUT - DB column doesn't exist yet
  // primaryContactPosition String?  @map("primary_contact_position") // COMMENTED OUT - DB column doesn't exist yet
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ownerRep    User?        @relation(fields: [ownerRepId], references: [id])
  contacts    Contact[]
  submissions Submission[]
  orders      Order[]
  activities  Activity[]
  mailMessages MailMessage[]

  @@map("accounts")
}

// Contact at Practice
model Contact {
  id                    String       @id @default(uuid())
  accountId             String       @map("account_id")
  contactType           ContactType  @map("contact_type")
  fullName              String       @map("full_name")
  title                 String?
  npiIndividual         String?      @map("npi_individual")
  phoneDisplay          String?      @map("phone_display")
  phoneE164             String?      @map("phone_e164")
  email                 String?
  preferredContactMethod String?     @map("preferred_contact_method")
  isPrimary             Boolean      @default(false) @map("is_primary")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  account Account @relation(fields: [accountId], references: [id])

  @@map("contacts")
}

// BAA/W9 Documents
model Document {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  type        DocumentType
  fileName    String        @map("file_name")
  fileUrl     String        @map("file_url")
  fileSize    Int           @map("file_size")
  mimeType    String        @map("mime_type")
  status      DocumentStatus @default(PENDING)
  signedAt    DateTime?     @map("signed_at")
  uploadedBy  String?       @map("uploaded_by") // Admin who uploaded
  s3Key       String?       @map("s3_key") // S3 object key
  s3Bucket    String?       @map("s3_bucket") // S3 bucket name
  description String?       // Optional description
  isTemplate  Boolean       @default(false) @map("is_template") // Template vs user-specific
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("documents")
  @@index([userId])
  @@index([type])
}

// API Call History
model Submission {
  id              String           @id @default(uuid())
  accountId       String           @map("account_id")
  submittedById   String           @map("submitted_by_id")
  status          SubmissionStatus
  idempotencyKey  String?          @unique @map("idempotency_key")
  requestPayload  Json             @map("request_payload")
  responsePayload Json?            @map("response_payload")
  errorMessage    String?          @map("error_message")
  httpCode        Int?             @map("http_code")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  account     Account @relation(fields: [accountId], references: [id])
  submittedBy User    @relation(fields: [submittedById], references: [id])

  @@map("submissions")
}

// Invite Tokens for Onboarding
model InviteToken {
  id           String    @id @default(uuid())
  token        String    @unique @default(cuid())
  email        String
  role         Role
  tempPassword String?   @map("temp_password")
  used         Boolean   @default(false)
  usedAt       DateTime? @map("used_at")
  expiresAt    DateTime  @map("expires_at")
  createdById  String    @map("created_by_id")
  createdAt    DateTime  @default(now())

  createdBy User @relation("CreatedInvites", fields: [createdById], references: [id])

  @@map("invite_tokens")
}

// Vendors
model Vendor {
  id           String    @id @default(uuid())
  name         String
  contactName  String    @map("contact_name")
  contactEmail String    @map("contact_email")
  phone        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]

  @@map("vendors")
}

// Vendor Products
model Product {
  id         String   @id @default(uuid())
  vendorId   String   @map("vendor_id")
  name       String   @map("product_name")
  sku        String   @unique
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  category   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  vendor     Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

// Rep Profile for metrics
model RepProfile {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  // metrics rollups (denormalized, updated nightly or on invoice webhook)
  totalSalesUsd       Decimal  @default(0) @map("total_sales_usd") @db.Decimal(12, 2)
  totalProfitUsd      Decimal  @default(0) @map("total_profit_usd") @db.Decimal(12, 2)
  activeAccountsCount Int      @default(0) @map("active_accounts_count")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rep_profiles")
}

// User Documents for onboarding
model UserDocument {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id])
  type       String    // Changed from DocType enum to String for flexibility
  status     DocStatus @default(PENDING)
  fileName   String?   @map("file_name")
  fileKey    String?   @map("file_key") // s3 key or local storage key
  mimeType   String?   @map("mime_type")
  sizeBytes  Int?      @map("size_bytes")
  signedAt   DateTime? @map("signed_at")
  envelopeId String?   @map("envelope_id") // DocuSign/Sign service id
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("user_documents")
  @@index([userId])
  @@index([type])
}

// Required document types that all reps must complete
model RequiredDocumentType {
  id          String   @id @default(uuid())
  name        String   // e.g., "W-9 Tax Form", "BAA Agreement"
  code        String   @unique // e.g., "w9", "baa", "hire_agreement"
  description String?
  required    Boolean  @default(true)
  order       Int      @default(0) // Display order
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("required_document_types")
  @@index([active])
  @@index([order])
}

// Activity log for account timeline
model Activity {
  id        String   @id @default(uuid())
  accountId String   @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  type      String   // "note", "status_change", "reactivation", etc.
  subject   String
  body      String?
  createdAt DateTime @default(now())

  @@map("activities")
  @@index([accountId])
}

// Account assignment audit trail
model AccountAssignment {
  id         String   @id @default(uuid())
  accountId  String   @map("account_id")
  repId      String   @map("rep_id")
  assignedBy String   @map("assigned_by")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("account_assignments")
  @@index([accountId])
  @@index([repId])
}

// Document Library (Admin managed documents)
model LibraryDocument {
  id           String              @id @default(uuid())
  title        String
  type         String              // 'w9', 'baa', 'policy', 'other'
  description  String?
  fileKey      String              @map("file_key") // S3 key or local storage key
  fileName     String              @map("file_name")
  mimeType     String              @map("mime_type")
  sizeBytes    Int                 @map("size_bytes")
  uploadedById String              @map("uploaded_by_id")
  uploadedBy   User                @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  recipients   DocumentRecipient[]

  @@map("library_documents")
  @@index([uploadedById])
  @@index([type])
}

// Document recipients (who the document was sent to)
model DocumentRecipient {
  id         String          @id @default(uuid())
  documentId String          @map("document_id")
  document   LibraryDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  repId      String          @map("rep_id")
  rep        User            @relation("ReceivedDocuments", fields: [repId], references: [id])
  status     String          @default("sent") // sent, viewed, acknowledged
  sentAt     DateTime        @default(now()) @map("sent_at")
  viewedAt   DateTime?       @map("viewed_at")

  @@map("document_recipients")
  @@index([documentId])
  @@index([repId])
  @@unique([documentId, repId])
}

// Orders (from CuraGenesis)
model Order {
  id              String      @id @default(uuid())
  orderId         String      @unique @map("order_id") // CuraGenesis order ID
  practiceId      String      @map("practice_id")
  accountId       String?     @map("account_id")
  orderDate       DateTime    @map("order_date")
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  status          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  account         Account?    @relation(fields: [accountId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

// Order Items with vendor cost tracking
model OrderItem {
  id               String   @id @default(uuid())
  orderId          String   @map("order_id")
  productName      String   @map("product_name")
  quantity         Int
  unitPrice        Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice       Decimal  @map("total_price") @db.Decimal(10, 2)
  
  // Vendor cost tracking (private - never exposed to reps)
  vendorProductId  String?  @map("vendor_product_id")
  vendorProduct    Product? @relation(fields: [vendorProductId], references: [id])
  unitCostUsd      Decimal? @map("unit_cost_usd") @db.Decimal(10, 2)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// System Settings
model Setting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Enums
enum Role {
  ADMIN
  RECRUITER
  AGENT
}

// COMMENTED OUT - DB enum doesn't exist yet
// enum Team {
//   IN_HOUSE        // CuraGenesis internal sales team
//   VANTAGE_POINT   // Vantage Point marketing/education partner
// }

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUBMITTED
  DORMANT
  CLOSED
}

enum ContactType {
  admin
  clinical
  billing
  provider
}

enum DocumentType {
  BAA
  W9
  OTHER
}

enum DocumentStatus {
  PENDING
  SIGNED
  EXPIRED
  REJECTED
}

enum OnboardStatus {
  INVITED
  EMAIL_CREATED
  CRM_USER_CREATED
  PENDING_DOCS
  ACTIVE
  SUSPENDED
}

enum DocType {
  BAA
  HIRE_AGREEMENT
  W9
  OTHER
}

enum DocStatus {
  PENDING
  SENT
  SIGNED
  REJECTED
}

enum SubmissionStatus {
  PENDING
  SUCCESS
  FAILED
}

// System-wide activity log for admin audit trail
model ActivityLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  user        User     @relation("UserActivities", fields: [userId], references: [id])
  action      String   // "ACCOUNT_CREATED", "CONTACT_ADDED", "PRACTICE_SUBMITTED", "DOCUMENT_UPLOADED", "LOGIN", etc.
  entityType  String?  // "Account", "Contact", "Document", "Submission", etc.
  entityId    String?  @map("entity_id") // ID of the affected entity
  entityName  String?  @map("entity_name") // Human-readable name (e.g., practice name)
  details     String?  // Additional context
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  metadata    Json?    // Any extra data
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("activity_log")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([entityType, entityId])
}

// ============================================================================
// DOCUMENT MANAGEMENT SYSTEM
// ============================================================================

// Folder structure for organizing documents
model Folder {
  id          String   @id @default(uuid())
  name        String
  description String?
  parentId    String?  @map("parent_id") // For nested folders
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[] @relation("FolderHierarchy")
  
  createdById String   @map("created_by_id")
  createdBy   User     @relation("CreatedFolders", fields: [createdById], references: [id])
  
  documents   DocumentFile[]
  permissions FolderPermission[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("folders")
  @@index([parentId])
  @@index([createdById])
}

// Documents with full metadata
model DocumentFile {
  id          String   @id @default(uuid())
  
  folderId    String?  @map("folder_id")
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  title       String
  description String?
  fileName    String   @map("file_name")
  fileKey     String   @map("file_key") // S3 key or local path
  mimeType    String   @map("mime_type")
  sizeBytes   Int      @map("size_bytes")
  
  tags        String[] // Array of tags for searching
  
  uploadedById String  @map("uploaded_by_id")
  uploadedBy   User    @relation("UploadedFiles", fields: [uploadedById], references: [id])
  
  visibility  DocumentVisibility @default(ADMIN_ONLY)
  
  permissions DocumentPermission[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("document_files")
  @@index([folderId])
  @@index([uploadedById])
  @@index([visibility])
}

// Folder-level permissions
model FolderPermission {
  id        String   @id @default(uuid())
  folderId  String   @map("folder_id")
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  
  userId    String?  @map("user_id") // Specific user access
  role      Role?    // Role-based access (ADMIN, AGENT, RECRUITER)
  
  canView   Boolean  @default(true) @map("can_view")
  canEdit   Boolean  @default(false) @map("can_edit")
  canDelete Boolean  @default(false) @map("can_delete")
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("folder_permissions")
  @@index([folderId])
  @@index([userId])
  @@unique([folderId, userId, role])
}

// Document-level permissions
model DocumentPermission {
  id         String       @id @default(uuid())
  documentId String       @map("document_id")
  document   DocumentFile @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  userId     String?      @map("user_id") // Specific user access
  role       Role?        // Role-based access
  
  canView    Boolean      @default(true) @map("can_view")
  canDownload Boolean     @default(true) @map("can_download")
  
  createdAt  DateTime     @default(now()) @map("created_at")

  @@map("document_permissions")
  @@index([documentId])
  @@index([userId])
  @@unique([documentId, userId, role])
}

enum DocumentVisibility {
  PUBLIC          // All users
  ADMIN_ONLY      // Only admins
  ROLE_BASED      // Based on role permissions
  CUSTOM          // Based on individual permissions
}

// ============================================================================
// EMAIL INTEGRATION (WorkMail Mirror)
// ============================================================================

// Email Messages (WorkMail mirror)
model MailMessage {
  id              String     @id @default(uuid())
  userId          String     @map("user_id")
  accountId       String?    @map("account_id") // Link to practice/customer
  folder          MailFolder @default(INBOX)
  messageId       String?    @unique @map("message_id") // Email Message-ID header
  inReplyTo       String?    @map("in_reply_to") // For threading
  references      String?    // Email References header (for threading)
  from            String     // Sender email
  to              String     // Recipient(s) - JSON array or comma-separated
  cc              String?    // CC recipients
  bcc             String?    // BCC recipients
  subject         String     @default("")
  snippet         String?    // First 150 chars of body
  bodyText        String?    @map("body_text") @db.Text // Plain text body
  bodyHtml        String?    @map("body_html") @db.Text // HTML body
  hasAttachments  Boolean    @default(false) @map("has_attachments")
  attachmentCount Int        @default(0) @map("attachment_count")
  isRead          Boolean    @default(false) @map("is_read")
  isStarred       Boolean    @default(false) @map("is_starred")
  receivedAt      DateTime   @default(now()) @map("received_at")
  sentAt          DateTime?  @map("sent_at") // For sent emails
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])

  @@index([userId, folder, receivedAt])
  @@index([messageId])
  @@index([accountId])
  @@map("mail_messages")
}

// Mail folder enum
enum MailFolder {
  INBOX
  SENT
  DRAFT
  ARCHIVE
  TRASH
}
